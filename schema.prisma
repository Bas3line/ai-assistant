generator client {
  provider = "prisma-client-go"
  output   = "./internal/database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  emails   Email[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Email {
  id        String   @id @default(cuid())
  messageId String   @unique
  threadId  String?
  subject   String?
  from      String
  to        String[]
  body      String?
  htmlBody  String?
  isRead    Boolean  @default(false)
  labels    String[]
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emails")
}

model AIConversation {
  id        String   @id @default(cuid())
  emailId   String?
  prompt    String
  response  String
  provider  String
  createdAt DateTime @default(now())

  @@map("ai_conversations")
}